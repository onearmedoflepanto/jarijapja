안녕하세요! SideBar에서 선택한 지역 정보를 MapPage로 전달하고, 해당 위치로 지도를 이동시키는 기능 구현을 위해 수정한 코드와 역할에 대한 설명입니다.

### 1. `src/components/sideBar/SideBar.tsx`

**수정 내용:**

-   **`LocationInfo` 인터페이스 추가**: 전달할 지역 정보(시/도, 시/군/구, 동의 이름 및 코드)의 타입을 명확하게 정의했습니다.
-   **`onDongChange` 콜백 함수 prop 추가**: 부모 컴포넌트로부터 `onDongChange`라는 함수를 prop으로 받도록 수정했습니다. 이 함수는 자식 컴포넌트(`SideBar`)에서 발생한 이벤트를 부모 컴포넌트로 전달하는 역할을 합니다.
-   **동(dong) 선택 `onClick` 이벤트 핸들러 수정**:
    -   기존에는 단순히 선택된 동의 이름만 상태로 저장했습니다.
    -   수정 후에는 동을 선택하면, 해당 동이 속한 시/도, 시/군/구의 전체 정보(이름과 코드 포함)를 `adongInfo.js` 데이터에서 찾아 `LocationInfo` 객체로 만듭니다.
    -   만들어진 `LocationInfo` 객체를 `onDongChange` 함수에 담아 호출함으로써, 부모 컴포넌트(`MapLayout`)로 선택된 지역의 전체 정보를 전달합니다.

**역할:**

-   `SideBar` 컴포넌트가 독립적으로 상태를 관리하는 대신, 사용자의 선택(이벤트)이 발생했을 때 그 결과를 부모 컴포넌트와 공유할 수 있도록 "상태 끌어올리기(Lifting State Up)" 패턴을 구현했습니다.

---

### 2. `src/app/map/layout.tsx`

**수정 내용:**

-   **`"use client"` 선언**: `useState`와 같은 React Hook을 사용하기 위해 클라이언트 컴포넌트로 전환했습니다.
-   **`location` 상태 추가**: `useState`를 사용하여 `SideBar`에서 선택된 지역 정보를 저장할 `location` 상태를 생성했습니다. 이 상태는 `SideBar`와 `MapPage`가 공유하는 공통 데이터가 됩니다.
-   **`handleDongChange` 함수 정의**: `SideBar`에서 전달받은 새로운 지역 정보로 `location` 상태를 업데이트하는 `handleDongChange` 함수를 정의했습니다.
-   **`SideBar`에 `onDongChange` prop 전달**: `<SideBar onDongChange={handleDongChange} />`와 같이 `SideBar` 컴포넌트에 상태 업데이트 함수를 prop으로 넘겨주었습니다.
-   **`React.cloneElement` 사용**:
    -   `MapLayout`의 자식 컴포넌트인 `MapPage`에 `location` 상태를 직접 전달하기 위해 `React.cloneElement`를 사용했습니다.
    -   이를 통해 `MapPage`는 `location`이라는 새로운 prop을 받을 수 있게 됩니다.

**역할:**

-   `SideBar`와 `MapPage`의 공통 부모로서, 두 컴포넌트 간의 데이터 흐름을 제어하는 중앙 관리자 역할을 합니다.
-   `SideBar`의 선택 이벤트를 받아 상태를 업데이트하고, 그 상태를 `MapPage`에 전달하여 지도가 동적으로 변경될 수 있도록 합니다.

---

### 3. `src/app/map/page.tsx`

**수정 내용:**

-   **`location` prop 받기**: `MapPageProps` 인터페이스를 수정하여 부모(`MapLayout`)로부터 `location` 정보를 prop으로 받을 수 있도록 했습니다.
-   **`@types/navermaps` 패키지 설치 (터미널 명령어)**: `window.naver` 객체에 대한 타입 정의가 없어 발생하던 TypeScript 오류를 해결하기 위해 네이버 지도 타입 정의 패키지를 설치했습니다.
-   **`useEffect` Hook 사용**:
    -   `location` prop이 변경될 때마다 특정 로직을 실행하기 위해 `useEffect`를 사용했습니다.
    -   `location`이 존재하고 지도가 초기화된 상태일 때, 선택된 시/도, 시/군/구, 동 이름을 조합하여 완전한 주소 문자열을 생성합니다.
-   **Naver Geocode API 연동**:
    -   `naver.maps.Service.geocode` API를 호출하여 생성된 주소 문자열을 지리적 좌표(위도, 경도)로 변환합니다.
    -   좌표 변환에 성공하면, `setCenter`와 `setZoom` 메소드를 사용해 지도 뷰를 해당 좌표로 부드럽게 이동시키고 확대합니다.
-   **`<Script>` 태그 정리**: 중복된 네이버 지도 스크립트 태그를 하나로 합치고, `geocoder` 서브모듈을 포함하도록 수정하여 API를 올바르게 호출할 수 있도록 했습니다.

**역할:**

-   `SideBar`에서 시작된 사용자 인터랙션의 최종 결과물(지도 변경)을 화면에 표시합니다.
-   부모로부터 받은 지역 정보를 바탕으로 외부 API(네이버 Geocode)와 통신하여 필요한 데이터를 가공하고, 이를 통해 지도 UI를 동적으로 업데이트하는 역할을 담당합니다.
